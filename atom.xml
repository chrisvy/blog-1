<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jesse&#39;s life</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://chenjiangsong.github.io/blog/"/>
  <updated>2016-12-15T07:18:33.000Z</updated>
  <id>http://chenjiangsong.github.io/blog/</id>
  
  <author>
    <name>Jesse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML5跟之前的HTML有什么不同</title>
    <link href="http://chenjiangsong.github.io/blog/2016/12/05/HTML5%E8%B7%9F%E4%B9%8B%E5%89%8D%E7%9A%84HTML%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/"/>
    <id>http://chenjiangsong.github.io/blog/2016/12/05/HTML5跟之前的HTML有什么不同/</id>
    <published>2016-12-05T07:17:04.000Z</published>
    <updated>2016-12-15T07:18:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>HTML</em>是超文本标记语言。所谓超文本，就是图片、链接、音乐甚至程序。HTML5（以下简称<em>HTML5</em>）和HTML4.01（以下简称<em>HTML</em>）及以前的版本有着根源上的差别。<br>提到标记语言就不得不提<em>SGML</em>（标准通用标记语言）。SGML提供了标记语言的语法和规范。<em>XML</em>是SGML的一个子集，HTML是SGML的一个应用。<br>我们先来聊聊XML。XML全称是<em>可拓展标记语言</em>，意思就是在双方约定好的前提规范下，标签名是可以自由定义的。这个<em>约定好的前提规范</em>就是DTD（文档规则定义）。<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xmlversion="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE note[</span></div><div class="line">&lt;!ELEMENT note(to,from,heading,body)&gt;</div><div class="line">&lt;!ELEMENT to(#PCDATA)&gt;</div><div class="line">&lt;!ELEMENT from(#PCDATA)&gt;</div><div class="line">&lt;!ELEMENT heading(#PCDATA)&gt;</div><div class="line">&lt;!ELEMENT body(#PCDATA)&gt;</div><div class="line">]&gt;</div><div class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don'tforgetmethisweekend<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里的<code>&lt;!doctype note&gt;</code>则是规定了<code>note</code>为xml文档的根元素，就像HTML的doctype规定了<code>html</code>是文档的根元素一样<code>&lt;!doctype html&gt;</code><br>接下来的就是DTD，规定了<code>note</code>,<code>to</code>,<code>from</code>,<code>heading</code>,<code>body</code>这几个标签元素的作用（是用来传递数据的）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">note</span>(<span class="attr">to</span>,<span class="attr">from</span>,<span class="attr">heading</span>,<span class="attr">body</span>)&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">to</span>(#<span class="attr">PCDATA</span>)&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">from</span>(#<span class="attr">PCDATA</span>)&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">heading</span>(#<span class="attr">PCDATA</span>)&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">body</span>(#<span class="attr">PCDATA</span>)&gt;</span></div></pre></td></tr></table></figure>
<p>同样，在HTML4.01及之前的版本中，doctype后面也是跟了DTD。我们打开<a href="http://www.w3.org/TR/html4/strict.dtd" target="_blank" rel="external">http://www.w3.org/TR/html4/strict.dtd</a>可以看到对HTML各个标签的详细定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</div></pre></td></tr></table></figure>
<p>基于此，我们可以浅显地定义一下，HTML4.01及之前的版本是适用一套通用DTD的XML文档。<br>那为什么HTML5的概念会被提出呢？HTML5跟之前的HTML又有什么区别呢？<br>我们还是来看一下XML，XML是被用来传递数据的，HTML是处理超文本的，处理超文本这件事不符合SGML的规范，所以在HTML5之前，基于SGML的HTML4.01是无法处理<code>video</code>、<code>audio</code>等超文本元素的。所以W3C为了网页应用更好的发展，制定了不基于SGML的新的HTML5规范，在沿用老版本功能的同时，也放弃了SGML的种种限制。自然而然，DTD这个SGML的产物也就不需要再出现在HTML5文档的头部了。可以说，HTML5能推出新标签，得益于脱离了SGML规范这个本质。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;HTML&lt;/em&gt;是超文本标记语言。所谓超文本，就是图片、链接、音乐甚至程序。HTML5（以下简称&lt;em&gt;HTML5&lt;/em&gt;）和HTML4.01（以下简称&lt;em&gt;HTML&lt;/em&gt;）及以前的版本有着根源上的差别。&lt;br&gt;提到标记语言就不得不提&lt;em&gt;SGML&lt;/em&gt;（标准通用标记语言）。SGML提供了标记语言的语法和规范。&lt;em&gt;XML&lt;/em&gt;是SGML的一个子集，HTML是SGML的一个应用。&lt;br&gt;我们先来聊聊XML。XML全称是&lt;em&gt;可拓展标记语言&lt;/em&gt;，意思就是在双方约定好的前提规范下，标签名是可以自由定义的。这个&lt;em&gt;约定好的前提规范&lt;/em&gt;就是DTD（文档规则定义）。&lt;br&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://chenjiangsong.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习笔记：获取页面节点种数</title>
    <link href="http://chenjiangsong.github.io/blog/2016/11/05/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E8%8A%82%E7%82%B9%E7%A7%8D%E6%95%B0/"/>
    <id>http://chenjiangsong.github.io/blog/2016/11/05/javascript学习笔记：获取页面节点种数/</id>
    <published>2016-11-05T07:21:39.000Z</published>
    <updated>2016-11-05T07:22:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>一行代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Set</span>([...document.all].map(e =&gt; e.tagName)).size</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://chenjiangsong.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习笔记：闭包</title>
    <link href="http://chenjiangsong.github.io/blog/2016/11/05/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%97%AD%E5%8C%85/"/>
    <id>http://chenjiangsong.github.io/blog/2016/11/05/Javascript学习笔记：闭包/</id>
    <published>2016-11-05T06:58:30.000Z</published>
    <updated>2016-11-05T07:02:07.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://chenjiangsong.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>单行文字两端对齐：用css伪类实现</title>
    <link href="http://chenjiangsong.github.io/blog/2016/10/09/%E5%8D%95%E8%A1%8C%E6%96%87%E5%AD%97%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90%EF%BC%9A%E7%94%A8css%E4%BC%AA%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://chenjiangsong.github.io/blog/2016/10/09/单行文字两端对齐：用css伪类实现/</id>
    <published>2016-10-09T08:36:45.000Z</published>
    <updated>2016-10-24T06:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做项目的时候碰到这个问题：<strong>右侧红线内的小标题单行两端对齐。</strong><br><img src="http://ob3wg7deo.bkt.clouddn.com/14760023432680.jpg" alt="设计稿"><br>两端对齐的css属性我们知道是<code>text-align:justify</code>，但是这个属性有它的局限性：<br>1.<code>display</code>只能为<code>inline</code>或<code>inline-block</code><br>2.多行文字才能实现两端对齐。<br>也就是说，在现在的情况下，小标题的单行文字仅仅使用<code>text-align:justify</code>是实现不了两端对齐的。<br>那我们就想办法把这个『单行文字』变成『多行文字』</p>
<p>怎样让一块内容后面多出东西，而又不会使页面多出垃圾元素呢？嘿嘿，类比清除浮动用到的方法，我们可以很快就想到使用<code>:after</code>伪类来解决问题。<br><a id="more"></a><br>html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small-unit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>开发<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>阿斯顿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small-unit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>开发商<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small-unit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>开发周期<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿阿斯顿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.small-unit</span>&#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.label</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">4em</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">text-align</span>: justify;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.label</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">4em</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">text-align</span>: justify;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.msg</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">5em</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.msg</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">'：'</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">1em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图，完美！<br><img src="http://ob3wg7deo.bkt.clouddn.com/14760665741148.jpg" alt=""></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>1.<code>.label</code>和它的<code>after</code>伪类要部分相同的css属性，来保证<code>after</code>元素是<code>.label</code>的第二行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    display:inline-block;</div><div class="line">    text-align: justify;</div><div class="line">    overflow: hidden;</div><div class="line">    width: 4em;</div><div class="line">    height: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.<code>:</code>冒号推荐写在<code>.msg</code>元素的<code>before</code>伪类上，写在label里面或外面都不能满足需求，具体效果可以自己试试看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;label&gt;&#123;&#123;label&#125;&#125;：&lt;/label&gt;</div><div class="line">或</div><div class="line">&lt;label&gt;&#123;&#123;label&#125;&#125;&lt;/label&gt;：</div></pre></td></tr></table></figure>
<p>3.最后，将<code>.label</code>元素用绝对定位固定住，顺便实现右侧多行的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做项目的时候碰到这个问题：&lt;strong&gt;右侧红线内的小标题单行两端对齐。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://ob3wg7deo.bkt.clouddn.com/14760023432680.jpg&quot; alt=&quot;设计稿&quot;&gt;&lt;br&gt;两端对齐的css属性我们知道是&lt;code&gt;text-align:justify&lt;/code&gt;，但是这个属性有它的局限性：&lt;br&gt;1.&lt;code&gt;display&lt;/code&gt;只能为&lt;code&gt;inline&lt;/code&gt;或&lt;code&gt;inline-block&lt;/code&gt;&lt;br&gt;2.多行文字才能实现两端对齐。&lt;br&gt;也就是说，在现在的情况下，小标题的单行文字仅仅使用&lt;code&gt;text-align:justify&lt;/code&gt;是实现不了两端对齐的。&lt;br&gt;那我们就想办法把这个『单行文字』变成『多行文字』&lt;/p&gt;
&lt;p&gt;怎样让一块内容后面多出东西，而又不会使页面多出垃圾元素呢？嘿嘿，类比清除浮动用到的方法，我们可以很快就想到使用&lt;code&gt;:after&lt;/code&gt;伪类来解决问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://chenjiangsong.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>javascript中的糟糕特性（一）</title>
    <link href="http://chenjiangsong.github.io/blog/2016/09/19/javascript%E4%B8%AD%E7%9A%84%E7%B3%9F%E7%B3%95%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://chenjiangsong.github.io/blog/2016/09/19/javascript中的糟糕特性（一）/</id>
    <published>2016-09-19T14:38:42.000Z</published>
    <updated>2016-11-02T16:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论前端的大牛还是小白，在与人讨论各个语言的特性时，逢JavaScript必谈其语言缺陷。然而作为一个混迹前端两年的老菜鸟，仍对大家伙口耳相传的『JavaScript语言缺陷』了解甚少。最近看技术稍微注意了一些，在博客中将其记录下来。在更深入地了解这门『吃饭手艺』的同时，也警示自己远离JavaScript的这些糟糕特性，编写出更有质量的代码。<br><a id="more"></a></p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>定义全局变量有3种方式</p>
<p>1.在任何函数外放置一个<code>var</code>语句</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = value</div></pre></td></tr></table></figure>
<p>2.给全局对象<code>window</code>添加一个属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.foo = value</div></pre></td></tr></table></figure>
<p>3.<strong>隐式全局变量</strong>——未经生命的变量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo = value</div></pre></td></tr></table></figure>
<p>坑爹的就是第三种定义方式。JavaScript的策略是让那些忘记预先声明的变量成为全局变量，本意是为了方便初学者，然而在代码质量上会造成<strong>全局变量污染</strong>，在业务处理过程中，也会导致<strong>bug难以定位</strong></p>
<h3 id="自动插入分号"><a href="#自动插入分号" class="headerlink" title="自动插入分号"></a>自动插入分号</h3><p>大括号换行还是不换行的选择困难患者的福音。</p>
<p>JavaScript有一个自动修复机制，它试图通过自动插入分号来修正有缺损的程序。这在某种情况下会造成更严重的错误。<br>当我们使用<code>return</code>返回一个对象时</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line">&#123;</div><div class="line">  status: <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//通过自动插入分号机制会变成==&gt;</span></div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#123;</div><div class="line">  status: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>就是<code>return</code>了一个<code>undefined</code>！这可不是我们想要的结果！</p>
<p>正确的保护<code>return</code>语句不被<strong>自动插入分号机制</strong>坑害的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  status: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="混乱的类型判断"><a href="#混乱的类型判断" class="headerlink" title="混乱的类型判断"></a>混乱的类型判断</h3><p>js是<a href="http://baike.baidu.com/link?url=XieOWMuLKgWn8skVS_Vegl21mJFj5eYcK2zasna-DfhO5e7ChsCFx9Zfch8s8wGgHEoDPzl_yn-AfVE2MgPb5Md7dLvavbyJTsvk7FlA1KrHjsGNckSfLL2nPFeU0-IbZtJOp78-MskShi5QEhK3c_" target="_blank" rel="external">弱类型语言</a>，相对于<a href="http://baike.baidu.com/link?url=_cfMaG15PXrgQIbVoxWVLtZz5LKNYe_-CQT0XIvMUwTJ4qaH14v-HDffD_PNO9pQPqO51HlDlG43nCtpNEoU2tNOwjdabnAlwcha4qo699_yTU9GvciLIDZXNVCTVOxi1bwOzUY12Ycv8bRKS3pIia" target="_blank" rel="external">强类型语言</a>它有两个特性：<br>1.不必严格定义数据类型<br>2.不必先定义后使用</p>
<p>虽然使用的时候方便灵活，不用进行类型转换，也不用定义多个变量，但是对于需要严谨的工作态度的研发人员来说，这其实是非常混乱、极易出错的特性。</p>
<p>正因为数据类型很『随性』，所以js带来了好几种<strong>判断数据类型</strong>的方案，然而都不是很完美</p>
<h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof是最简单常见的数据类型判断工具了，它可以快速的判断出<code>number</code>，<code>boolean</code>，<code>string</code>，<code>undefined</code>，<code>object</code>，甚至是<code>function</code>，<br>但是它居然辨别不出<strong>null</strong>与<strong>对象</strong>！</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></div></pre></td></tr></table></figure>
<p>同样也分辨不出<strong>数组</strong>和<strong>对象</strong>，</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> [] <span class="comment">//object</span></div></pre></td></tr></table></figure>
<p><strong>正则</strong>与<strong>对象</strong>呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> /a/ <span class="comment">//object  注：Safari5、Chrome7及之前的版本会返回 function</span></div></pre></td></tr></table></figure>
<p>好吧，同样是object里的复杂数据类型，你就把<strong>function</strong>单独判断出来是几个意思。。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">// function</span></div></pre></td></tr></table></figure>
<p>太坑爹了。。</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instanceof能判断出是否是我们想要的数据类型，然而获取不到变量的数据类型</p>
<h4 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h4><p>应该是判断数据类型最强大的方法了，虽然它的返回值不够简便，而且调用方法太长了。<br>不过我们可以自己封装一个简便的方法放到自己的util工具集里</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> getDataType = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>).replace(<span class="regexp">/(\[object\s)(\w+)(\])/</span>,<span class="string">'$2'</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">const</span> b = <span class="string">'呵呵哒'</span></div><div class="line"><span class="keyword">const</span> c = []</div><div class="line"><span class="keyword">const</span> d = &#123;&#125;</div><div class="line"><span class="keyword">const</span> e = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">const</span> f = <span class="regexp">/abcd/</span></div><div class="line"><span class="keyword">const</span> g = <span class="literal">null</span></div><div class="line">getDataType(a)   <span class="comment">// Number </span></div><div class="line">getDataType(b)   <span class="comment">// String</span></div><div class="line">getDataType(c)   <span class="comment">// Array</span></div><div class="line">getDataType(d)   <span class="comment">// Object</span></div><div class="line">getDataType(e)   <span class="comment">// Function</span></div><div class="line">getDataType(f)   <span class="comment">// RegExp</span></div><div class="line">getDataType(g)   <span class="comment">// Null</span></div></pre></td></tr></table></figure>
<p>甚至能检测出 <code>arguments</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testArgument = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> getDataType(<span class="built_in">arguments</span>)</div><div class="line">&#125;</div><div class="line">testArgument() <span class="comment">// Arguments</span></div></pre></td></tr></table></figure>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>打开浏览器的控制台，输入以下几个例子，大家感受下<br><img src="http://ob3wg7deo.bkt.clouddn.com/14781041293673.jpg" alt=""><br>糟糕点：<br>1.js浮点数计算精度丢失，<strong>所以尽量不要在前端进行计算处理！丢给后端去做！</strong><br>2.js浮点数连整数带小数部分只有17个有效数字，<strong>所以精度过高的浮点数在前端这里展示都成问题！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论前端的大牛还是小白，在与人讨论各个语言的特性时，逢JavaScript必谈其语言缺陷。然而作为一个混迹前端两年的老菜鸟，仍对大家伙口耳相传的『JavaScript语言缺陷』了解甚少。最近看技术稍微注意了一些，在博客中将其记录下来。在更深入地了解这门『吃饭手艺』的同时，也警示自己远离JavaScript的这些糟糕特性，编写出更有质量的代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://chenjiangsong.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>春江花月夜</title>
    <link href="http://chenjiangsong.github.io/blog/2016/09/14/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C/"/>
    <id>http://chenjiangsong.github.io/blog/2016/09/14/春江花月夜/</id>
    <published>2016-09-14T09:37:06.000Z</published>
    <updated>2016-09-14T10:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>春江潮水连海平，海上明月共潮生。</p>
<p>滟滟随波千万里，何处春江无月明!</p>
<p>江流宛转绕芳甸，月照花林皆似霰;</p>
<p>空里流霜不觉飞，汀上白沙看不见。</p>
<p>江天一色无纤尘，皎皎空中孤月轮。</p>
<p>江畔何人初见月？江月何年初照人？</p>
<p>人生代代无穷已，江月年年望相似。</p>
<p>不知江月待何人，但见长江送流水。</p>
<p>白云一片去悠悠，青枫浦上不胜愁。</p>
<p>谁家今夜扁舟子？何处相思明月楼？</p>
<p>可怜楼上月徘徊，应照离人妆镜台。</p>
<p>玉户帘中卷不去，捣衣砧上拂还来。</p>
<p>此时相望不相闻，愿逐月华流照君。</p>
<p>鸿雁长飞光不度，鱼龙潜跃水成文。</p>
<p>昨夜闲潭梦落花，可怜春半不还家。</p>
<p>江水流春去欲尽，江潭落月复西斜。</p>
<p>斜月沉沉藏海雾，碣石潇湘无限路。</p>
<p>不知乘月几人归，落月摇情满江树。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;春江潮水连海平，海上明月共潮生。&lt;/p&gt;
&lt;p&gt;滟滟随波千万里，何处春江无月明!&lt;/p&gt;
&lt;p&gt;江流宛转绕芳甸，月照花林皆似霰;&lt;/p&gt;
&lt;p&gt;空里流霜不觉飞，汀上白沙看不见。&lt;/p&gt;
&lt;p&gt;江天一色无纤尘，皎皎空中孤月轮。&lt;/p&gt;
&lt;p&gt;江畔何人初见月？江月何年初照人？&lt;
    
    </summary>
    
    
      <category term="文学爱好者" scheme="http://chenjiangsong.github.io/blog/tags/%E6%96%87%E5%AD%A6%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>洛神赋</title>
    <link href="http://chenjiangsong.github.io/blog/2016/09/08/%E6%B4%9B%E7%A5%9E%E8%B5%8B/"/>
    <id>http://chenjiangsong.github.io/blog/2016/09/08/洛神赋/</id>
    <published>2016-09-08T10:14:32.000Z</published>
    <updated>2016-09-08T10:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋，其词曰：</p>
<p>余从京域，言归东藩，背伊阙 ，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则未察，仰以殊观。睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯，若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王所见，无乃是乎？其状若何，臣愿闻之。”</p>
<p>余告之曰：其形也，翩若惊鸿，婉若游龙，荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘飖兮若流风之回雪。远而望之，皎若太阳升朝霞。迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露，芳泽无加，铅华弗御。云髻峨峨，修眉联娟，丹唇外朗，皓齿内鲜。明眸善睐，靥辅承权，瓌姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。攘皓腕于神浒兮，采湍濑之玄芝。</p>
<p>余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修，羌习礼而明诗。抗琼珶以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。</p>
<p>于是洛灵感焉，徙倚彷徨。神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。 尔乃众灵杂遝，命俦啸侣。或戏清流，或翔神渚。或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神。凌波微步，罗袜生尘。动无常则，若危若安。进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。</p>
<p>于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉鸾以偕逝。六龙俨其齐首，载云车之容裔。鲸鲵踊而夹毂，水禽翔而为卫。于是越北沚，过南冈，纡素领，回清阳，动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮，哀一逝而异乡。无微情以效爱兮，献江南之明珰。虽潜处于太阴，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。</p>
<p>于是背下陵高，足往神留。遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘返，思绵绵而增慕。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋，其词曰：&lt;/p&gt;
&lt;p&gt;余从京域，言归东藩，背伊阙 ，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则未察
    
    </summary>
    
    
      <category term="文学爱好者" scheme="http://chenjiangsong.github.io/blog/tags/%E6%96%87%E5%AD%A6%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>滕王阁序</title>
    <link href="http://chenjiangsong.github.io/blog/2016/09/08/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/"/>
    <id>http://chenjiangsong.github.io/blog/2016/09/08/滕王阁序/</id>
    <published>2016-09-07T17:37:58.000Z</published>
    <updated>2016-09-08T10:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</p>
<p>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</p>
<p>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。</p>
<p>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</p>
<p>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</p>
<p>勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p>
<p>呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：</p>
<p>   滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p>
<p>   画栋朝飞南浦云，珠帘暮卷西山雨。</p>
<p>   闲云潭影日悠悠，物换星移几度秋。</p>
<p>   阁中帝子今何在？槛外长江空自流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起
    
    </summary>
    
    
      <category term="文学爱好者" scheme="http://chenjiangsong.github.io/blog/tags/%E6%96%87%E5%AD%A6%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>crontab入门</title>
    <link href="http://chenjiangsong.github.io/blog/2016/07/25/crontab%E5%85%A5%E9%97%A8/"/>
    <id>http://chenjiangsong.github.io/blog/2016/07/25/crontab入门/</id>
    <published>2016-07-25T07:13:03.000Z</published>
    <updated>2016-09-08T10:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>crontab是linux系统下的定时任务，可用于定时执行脚本，实现定时爬虫、任务等功能。<br>本文简单介绍了命令行的crontab操作。</p>
<a id="more"></a>
<h3 id="简单的crontab命令："><a href="#简单的crontab命令：" class="headerlink" title="简单的crontab命令："></a>简单的crontab命令：</h3><blockquote>
<p>crontab -help<br>crontab -l   ：查看已有的定时任务<br>crontab -e  ：编辑或新增定时任务<br>crontab -r   ：删除此用户下所有定时任务</p>
</blockquote>
<h3 id="一条crontab任务的结构"><a href="#一条crontab任务的结构" class="headerlink" title="一条crontab任务的结构"></a>一条crontab任务的结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   *      *      *      *      *               command</div><div class="line">|      |      |      |      |                  |</div><div class="line">分钟    小时    天     月      周         运行的语句、执行的程序</div><div class="line">(0~59) (0~23) (1~31) (1~12)  (0~6)</div></pre></td></tr></table></figure>
<blockquote>
<p>在以上各个字段中，还可以使用以下特殊字符：</p>
<p>星号（*）：代表所有可能的值。</p>
<p>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</p>
<p>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</p>
<p>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p>
</blockquote>
<h3 id="已经写好的实例（天气预报爬虫）"><a href="#已经写好的实例（天气预报爬虫）" class="headerlink" title="已经写好的实例（天气预报爬虫）"></a>已经写好的实例（天气预报爬虫）</h3><blockquote>
<p>1,5,6,7,8 8,11,18 <em> </em> * /usr/local/php/bin/php /usr/local/project/htdocs/app_rpt/index.php weather/airquality spyForecast &gt;/dev/null 2&gt;&amp;1</p>
<p>9,13,14,15,16 8,11,18 <em> </em> * /usr/local/php/bin/php /usr/local/project/htdocs/app_rpt/index.php weather/airquality spyIndex &gt;/dev/null 2&gt;&amp;1</p>
<p>55 7,10,17 <em> </em> * /usr/local/php/bin/php /usr/local/project/htdocs/app_rpt/index.php weather/airquality set0 &gt;/dev/null 2&gt;&amp;1</p>
<p>*/5 <em> </em> <em> </em> /usr/local/php/bin/php /usr/local/project/htdocs/app_rpt/index.php airpm/get_latest &gt;/dev/null 2&gt;&amp;1</p>
<p>55 23 <em> </em> * /usr/local/php/bin/php /usr/local/project/htdocs/app_rpt/index.php weather/airquality calculate &gt;/dev/null 2&gt;&amp;1</p>
</blockquote>
<h3 id="自己动手操作"><a href="#自己动手操作" class="headerlink" title="自己动手操作"></a>自己动手操作</h3><blockquote>
<p>*/1 <em> </em> <em> </em> date &gt;&gt; /usr/local/project/htdocs/app_pc/resource/log.txt &gt;/dev/null 2&gt;&amp;1</p>
<p>将当前服务器的时间输入log.txt，每分钟执行一次</p>
</blockquote>
<h3 id="查看crontab日志"><a href="#查看crontab日志" class="headerlink" title="查看crontab日志"></a>查看crontab日志</h3><blockquote>
<p>进入日志目录  cd  /var/log</p>
<p>只查看crontab相关日志文件  ls -l cron*</p>
</blockquote>
<h3 id="特殊技法"><a href="#特殊技法" class="headerlink" title="特殊技法"></a>特殊技法</h3><p>四月第一个周日执行任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">30 19 1-7 4 *  <span class="built_in">test</span> \`date +\%w` <span class="_">-eq</span> 0 &amp;&amp; [<span class="built_in">command</span>]</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.imooc.com/learn/216" target="_blank" rel="external">慕课网 crontab教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;crontab是linux系统下的定时任务，可用于定时执行脚本，实现定时爬虫、任务等功能。&lt;br&gt;本文简单介绍了命令行的crontab操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://chenjiangsong.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>js中的数组化</title>
    <link href="http://chenjiangsong.github.io/blog/2016/06/08/js%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%8C%96/"/>
    <id>http://chenjiangsong.github.io/blog/2016/06/08/js中的数组化/</id>
    <published>2016-06-08T11:04:18.000Z</published>
    <updated>2016-11-07T10:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器下有很多<strong>类数组对象</strong></p>
<ul>
<li>arguments</li>
<li>HTMLCollection（document.getElementsByTagName等方式获取的节点集合）</li>
<li>特殊写法的自定义对象arrayLike，如下：<a id="more"></a>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayLike = &#123;</div><div class="line">  <span class="number">0</span>:<span class="string">'a'</span>,</div><div class="line">  <span class="number">1</span>:<span class="string">'b'</span>,</div><div class="line">  <span class="number">2</span>:<span class="string">'c'</span>,</div><div class="line">  length:<span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用<code>Object.prototype.toString.call()</code>检测一下这三种类数组对象的数据类型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>) <span class="comment">//[object Arguments]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)) <span class="comment">// [object HTMLCollection]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(arrayLike) <span class="comment">// [object Object]</span></div></pre></td></tr></table></figure>
<h3 id="数组化的三种方法"><a href="#数组化的三种方法" class="headerlink" title="数组化的三种方法"></a>数组化的三种方法</h3><h4 id="Array-prototype-slice-call"><a href="#Array-prototype-slice-call" class="headerlink" title="Array.prototype.slice.call"></a>Array.prototype.slice.call</h4><p>类数组对象的数组化 最简单的方法是 <code>Array.prototype.slice.call</code>。但在旧版本IE下的HTMLCollection、NodeList不是object下的子类，浏览器会报异常，所以来看看jquery是怎么实现的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery makeArray</span></div><div class="line"><span class="keyword">var</span> makeArray = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ret = []</div><div class="line">  <span class="keyword">if</span> (array != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">var</span> i = array.length</div><div class="line">    <span class="comment">//window对象 字符串 函数 也有length属性</span></div><div class="line">    <span class="keyword">if</span> (i == <span class="literal">null</span> || <span class="keyword">typeof</span> array === <span class="string">'String'</span> || jQuery.isFunction(array) ||array.setInterval)</div><div class="line">        ret[<span class="number">0</span>] = array</div><div class="line">    <span class="keyword">else</span></div><div class="line">        ret[--i] = array[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要原理是获取类数组的length属性的值，然后将类数组里的元素全都push到一个新的真实数组里去。</p>
<h4 id="Array-from（ES6）"><a href="#Array-from（ES6）" class="headerlink" title="Array.from（ES6）"></a>Array.from（ES6）</h4><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类数组对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NodeList对象</span></div><div class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</div><div class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(p);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// arguments对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//字符串</span></div><div class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>)   <span class="comment">// ['h', 'e', 'l', 'l', 'o']</span></div><div class="line"></div><div class="line"><span class="comment">//Set对象</span></div><div class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></div></pre></td></tr></table></figure>
<h4 id="…（ES6）"><a href="#…（ES6）" class="headerlink" title="…（ES6）"></a><strong>…</strong>（ES6）</h4><p><code>...</code>是ES6中新增的扩展运算符，也可以将某些数据结构转为数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// arguments对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = [...arguments];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NodeList对象</span></div><div class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</div></pre></td></tr></table></figure>
<h3 id="思考？数据化跟length属性有关么？"><a href="#思考？数据化跟length属性有关么？" class="headerlink" title="思考？数据化跟length属性有关么？"></a>思考？数据化跟length属性有关么？</h3><p>在jQuery的数组化过程中我们看到了剔除了带有length属性的window、string、function，我们也在<code>Array.prototype.slice.call</code>里试一试</p>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/14715012487175.jpg" alt=""></p>
<p>很明显<code>Array.prototype.slice.call</code>没有经过考验，把带有length属性的对象都slice成了数组。</p>
<p>实际上，js中的几种数组化的方法，都是调用遍历器接口<code>Symbol.iterator</code>，如果一个对象没有部署，就无法转换。<br><strong><code>Array.prototype.slice.call</code>和<code>Array.from</code>还支持转换类数组对象（本质特征就是有length属性），也就是说任何有length属性的对象都可以通过这两种方法转换成数组，而<code>...</code>不行。</strong><br><strong>并且<code>Array.prototype.slice.call</code>和<code>Array.from</code>的返回结果还有一些不同</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123; length: <span class="number">2</span> &#125;</div><div class="line"></div><div class="line">[...a]</div><div class="line"><span class="built_in">Array</span>.from(a)</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(a)</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/14785121041337.jpg" alt=""></p>
<p>我们可以看到：<br>1.<code>...</code>不能直接转换<code>{length:2}</code>这种对象。<br>2.<code>Array.from</code>返回一个100个成员的数组，并且每个成员都为<code>undefined</code><br>3.<code>Array.prototype.slice.call</code>返回一个length为100的数组，没有定义数组成员</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>类数组对象</strong></p>
<ul>
<li>arguments</li>
<li>HTMLCollection</li>
<li>自定义对象arrayLike</li>
</ul>
<p><strong>js数组转换的方法</strong></p>
<ul>
<li>Array.prototype.slice.call</li>
<li>Array.from</li>
<li>…</li>
</ul>
<p><strong>带有length属性的特殊对象</strong></p>
<ul>
<li>数组</li>
<li>window对象</li>
<li>字符串</li>
<li>function</li>
</ul>
<p><strong>三种方法都是优先判断对象有没有遍历器接口（Symbol.iterator）来进行数组转换，<code>Array.prototype.slice.call</code>和<code>Array.from</code>还可以通过判断参数有没有length属性来转换数组</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器下有很多&lt;strong&gt;类数组对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arguments&lt;/li&gt;
&lt;li&gt;HTMLCollection（document.getElementsByTagName等方式获取的节点集合）&lt;/li&gt;
&lt;li&gt;特殊写法的自定义对象arrayLike，如下：
    
    </summary>
    
    
      <category term="javascript" scheme="http://chenjiangsong.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用nrm控制npm源</title>
    <link href="http://chenjiangsong.github.io/blog/2016/03/13/%E4%BD%BF%E7%94%A8nrm%E6%8E%A7%E5%88%B6npm%E6%BA%90/"/>
    <id>http://chenjiangsong.github.io/blog/2016/03/13/使用nrm控制npm源/</id>
    <published>2016-03-13T02:17:17.000Z</published>
    <updated>2016-09-22T03:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>nrm是一个npm源管理器，安装之后使用命令行操作可以方便地在各个npm源之间切换。并且自带了新增自定义npm源，测速等功能<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nrm</div></pre></td></tr></table></figure>
<h3 id="列出已有npm源"><a href="#列出已有npm源" class="headerlink" title="列出已有npm源"></a>列出已有npm源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm ls  //带*号的是当前使用的源</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/QQ20160730-1@2x.png" alt=""></p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm use taobao //切换到taobao源</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/QQ20160730-2@2x.png" alt=""></p>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/QQ20160730-3@2x.png" alt=""></p>
<p>已经成功切换到taobao源 这时候执行<code>npm i</code>命令就会从taobao源上下载包并安装</p>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm add &lt;registry&gt; &lt;url&gt; [home]</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/QQ20160730-4@2x.png" alt=""></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm del &lt;registry&gt;</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/QQ20160730-5@2x.png" alt=""></p>
<h3 id="测单一速度"><a href="#测单一速度" class="headerlink" title="测单一速度"></a>测单一速度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm test &lt;registry&gt;</div></pre></td></tr></table></figure>
<h3 id="测全部速度"><a href="#测全部速度" class="headerlink" title="测全部速度"></a>测全部速度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm test</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/QQ20160730-6@2x.png" alt=""></p>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p><a href="github.com/Pana/nrm">github.com/Pana/nrm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nrm是一个npm源管理器，安装之后使用命令行操作可以方便地在各个npm源之间切换。并且自带了新增自定义npm源，测速等功能&lt;br&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://chenjiangsong.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>破解朋友圈白内障照片教程</title>
    <link href="http://chenjiangsong.github.io/blog/2016/01/26/%E7%A0%B4%E8%A7%A3%E6%9C%8B%E5%8F%8B%E5%9C%88%E7%99%BD%E5%86%85%E9%9A%9C%E7%85%A7%E7%89%87%E6%95%99%E7%A8%8B/"/>
    <id>http://chenjiangsong.github.io/blog/2016/01/26/破解朋友圈白内障照片教程/</id>
    <published>2016-01-26T14:48:21.000Z</published>
    <updated>2016-09-08T11:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何利用fiddler工具抓取移动端http请求的方法。<br><a id="more"></a></p>
<p>1.准备好windows笔记本电脑，并确保电脑和手机连在同一个wifi下（mac用户都是土豪，不教了）</p>
<p>2.电脑上下载安装软件——fiddler，并注意去掉“安装百度杀毒”</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1280556-a9e8c6c3612e70d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>3.顺利安装后，发现桌面并没有多一个软件图标<br><img src="http://upload-images.jianshu.io/upload_images/1280556-0613800eadda30ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>没事，去菜单栏找。。。找到了！悄悄打开它。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1280556-e78d81ec7865dfaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>4.首先会弹个窗，随便点yes或no<br><img src="http://upload-images.jianshu.io/upload_images/1280556-aaf13f3f2a0872f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>进入软件主界面<br><img src="http://upload-images.jianshu.io/upload_images/1280556-09f17bd137f20dff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>点击左上方“Tools”-&gt;“Fiddler Options”-&gt;“Connections”，标红那一条打钩，点“OK”关闭</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1280556-b446965349b5938e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>鼠标移到右上角“Online”处，会弹出一段英文，把“192.168.xxx.xxx”这两个IP地址都记下来。<br><img src="http://upload-images.jianshu.io/upload_images/1280556-0f31a616b08df723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>5.接下来，到手机上设置wifi代理。以iPhone为例。先看下IP地址，嗯~192.168.1.103，那我们就用刚才记下来的两个IP地址中的192.168.1.106(因为两者比较像)，填到下面的HTTP代理——手动，端口直接填“8888”，然后左上角退出就OK了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1280556-db874f17dea9133e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>安卓机同学这一步可以参考这篇<a href="http://jingyan.baidu.com/article/03b2f78c7b6bb05ea237aed2.html" target="_blank" rel="external">如何用Fiddler对Android应用进行抓包</a></p>
<p>6.进入微信，清理缓存。设置——通用——清理微信存储空间</p>
<p>7.然后进入朋友圈，一直往下拉就行了，我们就可以看到fiddler已经把朋友圈里的未处理过的照片都抓取到了，红框里的都是抓到的朋友圈照片，随便点开看吧~~<br><img src="http://upload-images.jianshu.io/upload_images/1280556-5efc8a0dee6b0357.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1280556-142d4005db54ea4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="海哥夫妇甜蜜上镜~"></p>
<p>8.这是微信的一个小失误，我们在浏览朋友圈白内障照片的时候，原始照片会从服务器飞到你手机上，然后你手机的微信将它模糊处理了。这个软件呢，就是在原始照片到你手机的飞行过程中，把它抓到了！<br><img src="http://upload-images.jianshu.io/upload_images/1280556-5675dee874826cb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>9.有这闲工夫的可以学一下，我先去发红包看私房照了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何利用fiddler工具抓取移动端http请求的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://chenjiangsong.github.io/blog/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>2015年下半年工作总结（补）</title>
    <link href="http://chenjiangsong.github.io/blog/2016/01/22/2015%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiangsong.github.io/blog/2016/01/22/2015年下半年工作总结/</id>
    <published>2016-01-22T11:38:07.000Z</published>
    <updated>2016-12-15T07:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到了总结的时候。刚刚过去的下半年，发生了两件事</p>
<p>##美的官网购买流程的以旧换新、优惠券两次大迭代</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了总结的时候。刚刚过去的下半年，发生了两件事&lt;/p&gt;
&lt;p&gt;##美的官网购买流程的以旧换新、优惠券两次大迭代&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://chenjiangsong.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>安装node-sass</title>
    <link href="http://chenjiangsong.github.io/blog/2016/01/08/%E5%AE%89%E8%A3%85node-sass/"/>
    <id>http://chenjiangsong.github.io/blog/2016/01/08/安装node-sass/</id>
    <published>2016-01-08T07:52:16.000Z</published>
    <updated>2016-12-15T06:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>不用怀疑了 亲测可用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不用怀疑了 亲测可用&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="npm" scheme="http://chenjiangsong.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>centOs上安装php和nginx</title>
    <link href="http://chenjiangsong.github.io/blog/2015/12/12/centOs%E4%B8%8A%E5%AE%89%E8%A3%85php%E5%92%8Cnginx/"/>
    <id>http://chenjiangsong.github.io/blog/2015/12/12/centOs上安装php和nginx/</id>
    <published>2015-12-12T08:02:02.000Z</published>
    <updated>2016-09-08T11:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>半年前还在美的电商工作时记录下的教程，针对的是CentOs7和php5<br><a id="more"></a></p>
<h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc gcc-c++ ncurses-devel perl</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装pcre开发包（nginx依赖）"><a href="#安装pcre开发包（nginx依赖）" class="headerlink" title="安装pcre开发包（nginx依赖）"></a>安装pcre开发包（nginx依赖）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y pcre-devel</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y zlib-devel</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wget http://nginx.org/download/nginx-1.7.9.tar.gz</div><div class="line"></div><div class="line">tar xzvf nginx-1.7.9.tar.gz</div><div class="line"></div><div class="line"><span class="built_in">cd</span> nginx-1.7.9</div><div class="line"></div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</div><div class="line"></div><div class="line">--user=nobody --group=nobody &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure>
<blockquote>
<p>wget:下载工具命令tar:解压缩包命令 参数：-x 解压 -z 判断是否使用gzip压缩 -v 解压过程显示文件 -f 使用文档名</p>
</blockquote>
<hr>
<h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<hr>
<h3 id="设置nginx开机启动"><a href="#设置nginx开机启动" class="headerlink" title="设置nginx开机启动"></a>设置nginx开机启动</h3><p><strong>写入文件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p><strong>设置成可执行</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p><strong>设置成开机启动</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装PHP依赖包"><a href="#安装PHP依赖包" class="headerlink" title="安装PHP依赖包"></a>安装PHP依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel libmcrypt libmcrypt-devel mysql-devel</div></pre></td></tr></table></figure>
<hr>
<h3 id="生成libmysqlclient软链"><a href="#生成libmysqlclient软链" class="headerlink" title="生成libmysqlclient软链"></a>生成libmysqlclient软链</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /usr/lib64/mysql/libmysqlclient.so.18.0.0 /usr/lib/libmysqlclient.so</div></pre></td></tr></table></figure>
<blockquote>
<p>通过查找libmysqlclient,发现是在/usr/lib64/mysql/目录内的libmysqlclient.so.18.0.0做的软连接,PHP默认是去的 /usr/lib/搜索,所以没有找到，所以要在php默认的/usr/lib/目录下生成链接到libmysqlclient的软链。<br><strong>注意，这里的libmysqlclient.so.18.0.0可能更新而修改版本号（之前我参考的教程就是libmysqlclient.so.16.0.0），所以我们要先进入/usr/lib64/mysql/目录，确定这个文件（libmysqlclient.so.18.0.0）的具体名称，再生成软链。</strong></p>
</blockquote>
<hr>
<h3 id="安装libmcrypt"><a href="#安装libmcrypt" class="headerlink" title="安装libmcrypt"></a>安装libmcrypt</h3><blockquote>
<p>centos源不能安装libmcrypt-devel，由于版权的原因没有自带mcrypt的包。所以这里我们使用自己在网上下载的包，然后上传到服务器的目录上。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://softlayer.dl.sourceforge.net/sourceforge/mcrypt/libmcrypt-2.5.8.tar.gz (使用附件的包或者自己下载的包)</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf libmcrypt-2.5.8.tar.gz</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> libmcrypt-2.5.8</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span> &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://cn2.php.net/distributions/php-5.3.29.tar.gz</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xzvf php-5.3.29.tar.gz</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> php-5.3.29</div></pre></td></tr></table></figure>
<p><strong>内存大于等于1G时</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --enable-fpm --with-mcrypt --enable-mbstring --with-curl --disable-debug -with-bz2 --with-zlib --enable-sockets --enable-zip --with-pcre-regex --with-mysql --with-mysqli --with-gd --with-jpeg-dir &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p><strong>内存小于1G时</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --enable-fpm --with-mcrypt --enable-mbstring --with-curl --disable-debug -with-bz2 --with-zlib --enable-sockets --enable-zip --with-pcre-regex --with-mysql --with-mysqli --with-gd --with-jpeg-dir --disable-fileinfo &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> <span class="_">-f</span> /usr/<span class="built_in">local</span>/php/bin/phar.phar /usr/<span class="built_in">local</span>/php/bin/phar</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/etc/</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv php-fpm.conf.default php-fpm.conf</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/<span class="built_in">local</span>/php/<span class="built_in">log</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 /usr/<span class="built_in">local</span>/php/<span class="built_in">log</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="修改php-fpm-conf文件"><a href="#修改php-fpm-conf文件" class="headerlink" title="修改php-fpm.conf文件"></a>修改php-fpm.conf文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</div></pre></td></tr></table></figure>
<blockquote>
<p>设置错误日志路径 <strong>error_log = /usr/local/php/log/php_errors.log</strong></p>
</blockquote>
<hr>
<h3 id="修改php-ini文件"><a href="#修改php-ini文件" class="headerlink" title="修改php.ini文件"></a>修改php.ini文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/php/etc/php.ini</div></pre></td></tr></table></figure>
<blockquote>
<p>设置时区中国 <strong>date.timezone = PRC</strong><br>隐藏php版本号 <strong>expose_php=Off</strong></p>
</blockquote>
<hr>
<h3 id="启动php-fpm"><a href="#启动php-fpm" class="headerlink" title="启动php-fpm"></a>启动php-fpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php-5.3.29</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /etc/init.d/php-fpm</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/php-fpm start</div></pre></td></tr></table></figure>
<hr>
<h3 id="配置一个虚拟主机"><a href="#配置一个虚拟主机" class="headerlink" title="配置一个虚拟主机"></a>配置一个虚拟主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/<span class="built_in">local</span>/nginx/conf/vhosts</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<blockquote>
<p>去掉log_format main前的注释，在最后一个“}”前加入一行 <strong>include vhosts/*.config;</strong></p>
</blockquote>
<hr>
<h3 id="检查一下配置文件是否有问题"><a href="#检查一下配置文件是否有问题" class="headerlink" title="检查一下配置文件是否有问题"></a>检查一下配置文件是否有问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>正确响应：</strong><br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</p>
</blockquote>
<hr>
<h3 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure>
<blockquote>
<p>每次新写入一个/usr/local/nginx/conf/vhosts/*.conf 文件都要运行这个命令哦</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半年前还在美的电商工作时记录下的教程，针对的是CentOs7和php5&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://chenjiangsong.github.io/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习笔记：URI编码方法</title>
    <link href="http://chenjiangsong.github.io/blog/2015/11/05/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AURI%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95/"/>
    <id>http://chenjiangsong.github.io/blog/2015/11/05/Javascript学习笔记：URI编码方法/</id>
    <published>2015-11-05T06:37:09.000Z</published>
    <updated>2016-11-05T06:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>encodeURI()和encodeURIComponent()方法都可以对URI编码发送给浏览器。</p>
<h4 id="为什么要编码？"><a href="#为什么要编码？" class="headerlink" title="为什么要编码？"></a>为什么要编码？</h4><p>因为有效的URI不能包含某些字符，例如空格。比如给后端接口传递当前页面的url时，包含一些特殊字符可能会在传递过程中或者接收之后解析不了导致失败</p>
<h4 id="有啥区别"><a href="#有啥区别" class="headerlink" title="有啥区别"></a>有啥区别</h4><p>encodeURI()只将<code>空格</code>转义成<code>%20</code>，适用于整个URI，不会将例如<code>http://</code>里的冒号斜杠都转义<br>encodeURIComponent()会将所有非字母数字都进行编码，使用于URI中的某一段（例如hash）</p>
<h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><p>decodeURI()和decodeURIComponent()分别对应上面两种编码方式</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;编码&quot;&gt;&lt;a href=&quot;#编码&quot; class=&quot;headerlink&quot; title=&quot;编码&quot;&gt;&lt;/a&gt;编码&lt;/h3&gt;&lt;p&gt;encodeURI()和encodeURIComponent()方法都可以对URI编码发送给浏览器。&lt;/p&gt;
&lt;h4 id=&quot;为什么要编码？
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://chenjiangsong.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习笔记：arguments</title>
    <link href="http://chenjiangsong.github.io/blog/2015/11/05/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9Aarguments/"/>
    <id>http://chenjiangsong.github.io/blog/2015/11/05/Javascript学习笔记：arguments/</id>
    <published>2015-11-05T05:58:25.000Z</published>
    <updated>2016-11-05T06:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.ES函数不介意传递进来多少参数，因为参数在函数内部是用一个数组：<code>arguments</code>（准确说是『类数组』）来表示的<br>2.<code>arguments</code>可以使用方括号语法来访问每一个元素，并且有length属性<br>3.<code>arguments</code>对象可以与命名参数一起使用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</div><div class="line">        alert(num1)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">        alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">doAdd(<span class="number">10</span>)      <span class="comment">// 10</span></div><div class="line">doAdd(<span class="number">10</span>, <span class="number">20</span>)  <span class="comment">// 30</span></div></pre></td></tr></table></figure>
<p>4.<code>arguments</code>的值永远与对应命名参数的值保持同步</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span></div><div class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2)</div><div class="line">&#125;</div><div class="line">doAdd(<span class="number">10</span>, <span class="number">20</span>)   <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<p>5.<code>arguments</code>对象的长度是由参数个数决定，不是由定义函数时的命名参数个数决定<br>6.<code>arguments</code>转成数组用<code>Array.prototype.slice.call</code>方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">    <span class="built_in">console</span>.log(args)</div><div class="line">&#125;</div><div class="line">doAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ob3wg7deo.bkt.clouddn.com/14783263408259.jpg" alt=""><br>7.<code>callee</code>属性<br>arguments对象有callee属性， 该属性是一个指针，指向拥有这个arguments对象的函数。在递归函数中，推荐使用<code>arguments.callee</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//阶乘函数</span></div><div class="line"></div><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>防止对factorial函数赋值到另一个函数名时，内部递归调用factorial失败</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.ES函数不介意传递进来多少参数，因为参数在函数内部是用一个数组：&lt;code&gt;arguments&lt;/code&gt;（准确说是『类数组』）来表示的&lt;br&gt;2.&lt;code&gt;arguments&lt;/code&gt;可以使用方括号语法来访问每一个元素，并且有length属性&lt;br&gt;3.&lt;co
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://chenjiangsong.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CORS：跨域解决方案</title>
    <link href="http://chenjiangsong.github.io/blog/2015/10/19/CORS%EF%BC%9A%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://chenjiangsong.github.io/blog/2015/10/19/CORS：跨域解决方案/</id>
    <published>2015-10-19T14:24:44.000Z</published>
    <updated>2016-09-22T07:54:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>CORS是一种新的服务端跨域方案。实现方式非常简单。</p>
<p>优点：相比jsonp，可以支持http的所有请求方式，jsonp只支持get方式（因为本质是通过script标签的src属性访问url）。支持ajax。<br>缺点：低版本浏览器（IE9-）不支持。<br><a id="more"></a></p>
<p>客户端js：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = XMLHttpRequest()</div><div class="line">xhr.open(<span class="string">'post'</span>,url,<span class="literal">true</span>) <span class="comment">//url绝对路径，true异步，false同步</span></div><div class="line">xhr.withCredentails = <span class="literal">true</span></div><div class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">xhr.send()</div></pre></td></tr></table></figure>
<p>服务端(node)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>,req.header.origin);</div><div class="line">res.setHeader(<span class="string">'Access-Control-Allow-Credentails'</span>,<span class="literal">true</span>);<span class="comment">//告诉客户端可以在http请求中加上cookie</span></div><div class="line">res.setHeader(<span class="string">'Access-Control-Allow-Method'</span>,<span class="string">'POST,GET,PUT,DELETE,OPTIONS'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CORS是一种新的服务端跨域方案。实现方式非常简单。&lt;/p&gt;
&lt;p&gt;优点：相比jsonp，可以支持http的所有请求方式，jsonp只支持get方式（因为本质是通过script标签的src属性访问url）。支持ajax。&lt;br&gt;缺点：低版本浏览器（IE9-）不支持。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://chenjiangsong.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>博客</title>
    <link href="http://chenjiangsong.github.io/blog/2015/09/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://chenjiangsong.github.io/blog/2015/09/29/第一篇博客/</id>
    <published>2015-09-29T07:17:50.000Z</published>
    <updated>2016-09-22T03:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于把自己的github博客弄起来了</p>
<p>接下来慢慢写点啥</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把自己的github博客弄起来了&lt;/p&gt;
&lt;p&gt;接下来慢慢写点啥&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://chenjiangsong.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2015上半年工作总结</title>
    <link href="http://chenjiangsong.github.io/blog/2015/07/12/2015%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiangsong.github.io/blog/2015/07/12/2015上半年工作总结/</id>
    <published>2015-07-12T04:48:01.000Z</published>
    <updated>2016-09-22T06:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>这半年来踏踏实实做了一些项目，有长期大坑智能家居，有自己瞎玩的图片上传，有第一次h5体验的校园活动，最后以大官网的订单系统作为上半年结尾。工作内容非常充实，自己的工作状态略有起伏，总体来说，上半年的表现还是勉强能够满意。接下来的总结正文，将分别从各个项目经历及个人的工作生活感受这两个方面来细说一下。<br><a id="more"></a></p>
<h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><h3 id="智能家居（第一阶段）"><a href="#智能家居（第一阶段）" class="headerlink" title="智能家居（第一阶段）"></a>智能家居（第一阶段）</h3><p>刚过完年继续接手智能家居项目的第一阶段——opencloud。这个项目对我来说最大的难点就是<strong>业务逻辑的处理</strong>和<strong>php公共类的设计思路</strong>。</p>
<ul>
<li><strong>业务逻辑</strong>这块因为自己文档理解的不够，在初期的时候有很多过程和步骤有所疑惑，好在有luke指导，一步步帮我捋顺，并且很负责地要求我复述，才让我能完全理解opencloud平台的运作过程。当时各个老大都比较忙，没什么时间关心这个事，所以在和苏宁及研究院对接的时候，我俨然已经成为了对这块最熟悉的人，好多事情都能由我亲自确认，做到这一点自己心里还是有点暗喜的。</li>
<li><strong>php公共类的设计模式</strong>，这是我第一次正经地用php部署大部分代码（之前的微信自动回复是在aiden的php代码基础上继续的），也是有一定的挑战。构建了第一个公共的类，实现了opencloud所有接口的配置，加解密及各个步骤的关键方法，基本满足了第一期的需要。但是在越来越深入理解业务之后，发现第一个类实在是有很多缺点，比如具体各个接口实例化之后的逻辑有点复杂，而且公共类的代码编写有点杂乱无章，不光自己在使用的时候有些烦躁，想必给交接人员也造成一定的困扰。于是自己花了一天时间重新构建了第二个公共类，无论代码逻辑还是接口实例化的使用都有了很大提升。这个类终究是项目末期完成，各个环节的测试已经接近尾声，不能再做大范围的改动，所以新的核心并没有运转在opencloud上，但是并没有多大关系。</li>
</ul>
<p>这个项目个人的亮点有三个：</p>
<p>1.年前根据文档完成了php对接java的sha256加解密的过程；</p>
<p>2.在项目初期自己为了方便测试构建了一个网页版接口测试工具，实现了能根据配置的appKey而自动生成令人头大的签名并直接返回接口数据，这个工具对我当初的开发和测试效率起到了至关重要的作用，现在自己在定位美居账号相关的问题时还偶尔能用到。在opencloud整体交接之后，发现交接人员在二期构建里，继续完善了这个工具，也是对自己成果的一个肯定；</p>
<p>3.在opencloud上完成了部署了后来作用很大的微信控制的代码，使用了自己后期写的第二个公共类，除了luke的协议转换类，其余代码几乎和opencloud分离。后面和美居账号相关的微信控制，这块内容都是起到了很大的作用</p>
<h3 id="图片上传工具"><a href="#图片上传工具" class="headerlink" title="图片上传工具"></a>图片上传工具</h3><p> 这是在智能家居的夹缝里挤出来的一周做的一个小工具，使用的是百度的开源技术webuploader。这个项目时间短，功能单一，可讲的比较少，暴露出来我的不足之处还是独立开发应用时用户体验做得还是不够好，可取之处是能尽快地满足一个基本需求（对比之前，自动回复管理拖得太久）。</p>
<h3 id="智能家居（第二阶段）"><a href="#智能家居（第二阶段）" class="headerlink" title="智能家居（第二阶段）"></a>智能家居（第二阶段）</h3><p>紧接着又投入了第二轮智能家居的开发， 这一次的项目相比之前投入了更多的人力，项目规模和难度也有很大提升。基于luke构建好的框架之上，我主要负责的是：</p>
<ul>
<li>小天鹅云中与阿里云对接的几个下行接口；</li>
<li>阿里云的对接工作；</li>
<li>微信控制的后台；</li>
<li>饭煲应用服务器；</li>
</ul>
<p>由于黄哥亲自带项目，时间紧，要求又高，lord和luke出差的那段时间是我压力最大的时候，这段时间对我最大的挑战就是问题的定位，我负责的环节像个交通枢纽，阿里云对接、阿里小智调试、微信控制这三个方向的问题源源不断，全找到我头上来，luke还在的时候心存侥幸，认为有什么问题找luke问一下就好，luke一走后，自己成了主要枢纽，联调的第一个上午就发现自己不知道的问题太多了，心里有点慌。但还是要顶住压力，和后台同学、阿里同学确认各方面的事情。经过几天的磨练后，总算将这一块的内容打通，项目在杭州的参展也很成功，自己的问题定位能力和应急处理能力也有了很大的提升。虽然过程比较苦涩，但是最后的结果非常让人欣慰。这段时间我对”工作“这件事也有了新的认识，它不只是挣工资的途径，更是人存在的意义。</p>
<h3 id="校园创业大赛"><a href="#校园创业大赛" class="headerlink" title="校园创业大赛"></a>校园创业大赛</h3><p>这是我参与的第一个h5项目，前端后端都是自己弄。难点有：</p>
<ul>
<li>各型号手机的兼容性；</li>
<li>微信后端逻辑的安全性考虑；</li>
</ul>
<p>这个活动项目中规中矩，业务逻辑上不是太复杂，由于自己在移动端的缺乏经验，开发时间显得有点紧张，最后还是勉强完成了任务，最后的效果经过验证还不错。这个项目还是暴露了自己在移动端的不熟悉，练习得太少，在业余时间应该多找些任务来练练手。</p>
<h3 id="PC官网订单系统"><a href="#PC官网订单系统" class="headerlink" title="PC官网订单系统"></a>PC官网订单系统</h3><p>这个项目基于aiden的php接口，cifer和milly的静态页面之上完成。我的工作内容主要是</p>
<ul>
<li>确认订单、创建订单</li>
<li>支付</li>
<li>订单详情</li>
<li>订单列表</li>
<li>物流</li>
</ul>
<p>整个项目静态页1周，开发2周，测试上线2周。在最后2周的测试阶段，几乎每天都加班到很晚，确实是有很大原因是自己在开发前期忽略了复杂度，部分原因是项目初期没有确立好非常明确的需求，导致在测试阶段花了大量的时间去讨论一些异常情况甚至是基础情况的解决方案。总体来说，这个项目是按时上线，自己的表现中规中矩，对待异常流的处理仍然需要加强。</p>
<h2 id="个人工作生活感受"><a href="#个人工作生活感受" class="headerlink" title="个人工作生活感受"></a>个人工作生活感受</h2><p>不知不觉来到这工作已经快8个月了，真的很感激组里的各位老大对我的信任，让我进入这么优秀的团队工作学习。去年的10月份，我自己都知道那时候自己的状态几乎不可能拿到offer，包括在刚进来的头两个月里，我的表现都比较差。不过大家还是信任我，愿意让我承担一些重要的项目。让我的工作有意义，能很快地提升自己的能力，真的很感激一直信任我帮助我维护我的 lord，aiden，光哥，luke，奇哥，还有跟我一同成长的小伙伴。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这半年来踏踏实实做了一些项目，有长期大坑智能家居，有自己瞎玩的图片上传，有第一次h5体验的校园活动，最后以大官网的订单系统作为上半年结尾。工作内容非常充实，自己的工作状态略有起伏，总体来说，上半年的表现还是勉强能够满意。接下来的总结正文，将分别从各个项目经历及个人的工作生活感受这两个方面来细说一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://chenjiangsong.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
